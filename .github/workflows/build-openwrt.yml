name: 构建 OpenWrt 固件

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenWrt 版本号 (如 24.10.2)'
        required: true
        default: '24.10.2'
      target:
        description: '目标架构 (如 x86)'
        required: true
        default: 'x86'
      subtarget:
        description: '子目标 (如 64)'
        required: true
        default: '64'
      profile:
        description: '设备配置文件 (如 generic)'
        required: true
        default: 'generic'
      rootfs_size:
        description: '根文件系统分区大小 (MiB, 如 1024)'
        required: true
        default: '1024'

jobs:
  build_job:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 安装依赖工具
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd build-essential libncurses5-dev gawk git gettext jq

      - name: 获取最新 OpenClash 版本
        run: |
          LATEST_OPENCLASH=$(curl -s https://api.github.com/repos/vernesong/OpenClash/releases/latest | jq -r '.tag_name')
          echo "最新 OpenClash 版本: $LATEST_OPENCLASH"
          echo "OPENCLASH_VERSION=$LATEST_OPENCLASH" >> $GITHUB_ENV

      - name: 下载 OpenWrt 镜像构建工具
        run: |
          URL="https://downloads.openwrt.org/releases/${{ inputs.version }}/targets/${{ inputs.target }}/${{ inputs.subtarget }}/openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64.tar.zst"
          echo "正在下载 Image Builder: $URL"
          wget $URL || { echo "主服务器下载失败，尝试镜像服务器"; wget "http://mirror2.openwrt.org/releases/${{ inputs.version }}/targets/${{ inputs.target }}/${{ inputs.subtarget }}/openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64.tar.zst" || { echo "镜像服务器也失败，请检查 URL 或网络"; exit 1; }; }
          echo "解压 zst 文件"
          zstd -d *.tar.zst || { echo "zstd 解压失败"; exit 1; }
          echo "解压 tar 文件"
          tar -xvf *.tar || { echo "tar 解压失败"; exit 1; }
          echo "列出当前目录内容"
          ls -l
          echo "进入 Image Builder 目录"
          IMAGE_BUILDER_DIR="openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64"
          echo "目标目录: $IMAGE_BUILDER_DIR"
          cd "$IMAGE_BUILDER_DIR" || { echo "进入 Image Builder 目录失败，目录名可能不正确"; ls -l; exit 1; }

      - name: 下载第三方插件包
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          mkdir -p packages
          cd packages
          # OpenClash: 动态获取最新版本
          echo "下载 luci-app-openclash (版本 ${{ env.OPENCLASH_VERSION }})"
          wget https://github.com/vernesong/OpenClash/releases/download/${{ env.OPENCLASH_VERSION }}/luci-app-openclash_${{ env.OPENCLASH_VERSION }}_all.ipk || { echo "luci-app-openclash 下载失败"; exit 1; }
          echo "下载 clash 核心 (版本 ${{ env.OPENCLASH_VERSION }}, x86_64)"
          wget https://github.com/vernesong/OpenClash/releases/download/${{ env.OPENCLASH_VERSION }}/clash_${{ env.OPENCLASH_VERSION }}_x86_64.ipk || { echo "clash 核心下载失败"; exit 1; }
          # 其他插件: 检查 https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/ 获取最新版本
          echo "下载 luci-app-adguardhome"
          wget https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-adguardhome_1.6.5-2_all.ipk || { echo "luci-app-adguardhome 下载失败"; exit 1; }
          echo "下载 adguardhome 核心"
          wget https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/adguardhome_0.107.51-1_x86_64.ipk || { echo "adguardhome 核心下载失败"; exit 1; }
          echo "下载 luci-app-quickstart"
          wget https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-quickstart_0.0.1-20240511_all.ipk || { echo "luci-app-quickstart 下载失败"; exit 1; }
          echo "下载 luci-app-dockerman"
          wget https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-dockerman_1.2-20240511_all.ipk || { echo "luci-app-dockerman 下载失败"; exit 1; }
          echo "下载 luci-app-nikki"
          wget https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-nikki_2.1.2-1_all.ipk || { echo "luci-app-nikki 下载失败"; exit 1; }
          echo "下载 luci-app-store"
          wget https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-store_0.2.5-1_all.ipk || { echo "luci-app-store 下载失败"; exit 1; }
          echo "下载 luci-app-upnp"
          wget https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-upnp_0.2.5-1_all.ipk || { echo "luci-app-upnp 下载失败"; exit 1; }
          # Lucky: 检查 https://github.com/gdy666/luci-app-lucky/releases 获取最新版本
          echo "下载 luci-app-lucky"
          wget https://github.com/gdy666/luci-app-lucky/releases/download/v2.15.8/luci-app-lucky_2.15.8_all.ipk || { echo "luci-app-lucky 下载失败"; exit 1; }
          ls -l
          cd ..

      - name: 更新软件源并添加自定义源
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          echo "src/gz openwrt_luci https://downloads.openwrt.org/releases/${{ inputs.version }}/packages/${{ inputs.target }}/luci" >> repositories.conf
          echo "src/gz custom_packages file://${PWD}/packages" >> repositories.conf
          cat repositories.conf
          make defconfig || { echo "make defconfig 失败"; exit 1; }

      - name: 构建自定义固件
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          PACKAGES="luci luci-theme-argon luci-app-openclash clash luci-app-adguardhome adguardhome luci-app-quickstart luci-app-dockerman luci-app-nikki luci-app-store luci-app-upnp luci-app-lucky luci-compat luci-ssl kmod-tun dnsmasq-full bash curl ca-bundle ipset ip-full iptables iptables-mod-tproxy iptables-mod-extra ruby ruby-yaml kmod-inet-diag unzip"
          echo "开始构建固件，包列表: $PACKAGES"
          make image PROFILE="${{ inputs.profile }}" PACKAGES="$PACKAGES" FILES="../files/" EXTRA_IMAGE_NAME="自定义" ROOTFS_PARTSIZE="${{ inputs.rootfs_size }}" || { echo "构建固件失败"; exit 1; }

      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-固件
          path: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64/bin/targets/${{ inputs.target }}/${{ inputs.subtarget }}/*
```
