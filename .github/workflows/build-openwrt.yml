name: 构建 OpenWrt 固件

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenWrt 版本号 (24.10.2)'
        required: true
        default: '24.10.2'
      target:
        description: '目标架构 (x86)'
        required: true
        default: 'x86'
      subtarget:
        description: '子目标 (64)'
        required: true
        default: '64'
      profile:
        description: '设备配置文件 (generic)'
        required: true
        default: 'generic'
      rootfs_size:
        description: '根文件系统分区大小 (MiB, 1024)'
        required: true
        default: '1024'

jobs:
  build_job:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 安装依赖工具
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd build-essential libncurses5-dev gawk git gettext

      - name: 下载 OpenWrt 镜像构建工具
        run: |
          URL="https://downloads.openwrt.org/releases/${{ inputs.version }}/targets/${{ inputs.target }}/${{ inputs.subtarget }}/openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64.tar.zst"
          echo "正在下载 Image Builder: $URL"
          wget $URL || { echo "主服务器下载失败，尝试镜像服务器"; wget "http://mirror2.openwrt.org/releases/${{ inputs.version }}/targets/${{ inputs.target }}/${{ inputs.subtarget }}/openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64.tar.zst" || { echo "镜像服务器也失败，请检查 URL 或网络"; exit 1; }; }
          echo "解压 zst 文件"
          zstd -d *.tar.zst || { echo "zstd 解压失败"; exit 1; }
          echo "解压 tar 文件"
          tar -xvf *.tar || { echo "tar 解压失败"; exit 1; }
          echo "列出当前目录内容"
          ls -l
          echo "进入 Image Builder 目录"
          IMAGE_BUILDER_DIR="openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64"
          echo "目标目录: $IMAGE_BUILDER_DIR"
          cd "$IMAGE_BUILDER_DIR" || { echo "进入 Image Builder 目录失败，目录名可能不正确"; ls -l; exit 1; }

      - name: 下载第三方插件包
        run: |
          cd openwrt-imagebuilder
          mkdir -p packages
          rm -rf packages/*
          cd packages
          download_latest_ipk() {
            PACKAGE="$1"
            PATTERN="$2"
            BASE_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/"
            HTML=$(curl -s "$BASE_URL")
            LATEST=$(echo "$HTML" | grep -o 'href="[^"]*\.ipk"' | sed 's/href="//;s/"$//' | grep -E "$PATTERN" | sort -V | tail -1)
            if [ -n "$LATEST" ]; then
              wget "${BASE_URL}${LATEST}"
            else
              echo "No matching file for $PACKAGE"
            fi
          }
          download_latest_ipk "luci-theme-argon" "luci-theme-argon_.*_all\.ipk"
          download_latest_ipk "luci-app-argon-config" "luci-app-argon-config_.*_all\.ipk"
          download_latest_ipk "luci-app-openclash" "luci-app-openclash_.*_all\.ipk"
          download_latest_ipk "luci-app-adguardhome" "luci-app-adguardhome_.*_all\.ipk"
          download_latest_ipk "luci-app-dockerman" "luci-app-dockerman_.*_all\.ipk"
          download_latest_ipk "luci-app-lucky" "luci-app-lucky_.*_all\.ipk"
          download_latest_ipk "luci-app-store" "luci-app-store_.*_all\.ipk"
          download_latest_ipk "luci-app-nikki" "luci-app-nikki_.*_all\.ipk"
          download_latest_ipk "luci-app-quickstart" "luci-app-quickstart_.*_all\.ipk"
          download_latest_ipk "adguardhome" "adguardhome_.*_x86_64\.ipk"
          download_latest_ipk "luci-app-upnp" "luci-app-upnp_.*_all\.ipk"
          download_latest_ipk "kmod-tun" "kmod-tun_.*_x86_64\.ipk"
          download_latest_ipk "kmod-ipt-fullconenat" "kmod-ipt-fullconenat_.*_x86_64\.ipk"
          cd ..

      - name: 更新软件源并添加自定义源
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          echo "src/gz openwrt_luci https://downloads.openwrt.org/releases/${{ inputs.version }}/packages/${{ inputs.target }}/luci" >> repositories.conf
          echo "src/gz custom_packages file://${PWD}/packages" >> repositories.conf
          cat repositories.conf
          make defconfig || { echo "make defconfig 失败"; exit 1; }

      - name: 构建自定义固件
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          PACKAGES="luci luci-theme-argon luci-app-openclash luci-app-adguardhome luci-app-quickstart luci-app-dockerman luci-app-nikki luci-app-store luci-app-upnp luci-app-lucky adguardhome dnsmasq-full -dnsmasq"
          echo "开始构建固件，包列表: $PACKAGES"
          make image PROFILE="${{ inputs.profile }}" PACKAGES="$PACKAGES" FILES="../files/" EXTRA_IMAGE_NAME="自定义" ROOTFS_PARTSIZE="${{ inputs.rootfs_size }}" || { echo "构建固件失败"; exit 1; }

      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-固件
          path: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64/bin/targets/${{ inputs.target }}/${{ inputs.subtarget }}/*
