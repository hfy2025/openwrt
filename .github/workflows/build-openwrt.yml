name: 构建 OpenWrt 固件

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenWrt 版本号 (24.10.2)'
        required: true
        default: '24.10.2'
      target:
        description: '目标架构 (x86)'
        required: true
        default: 'x86'
      subtarget:
        description: '子目标 (64)'
        required: true
        default: '64'
      profile:
        description: '设备配置文件 (generic)'
        required: true
        default: 'generic'
      rootfs_size:
        description: '根文件系统分区大小 (MiB, 1024)'
        required: true
        default: '1024'

jobs:
  build_job:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 安装依赖工具
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python3

      - name: 下载 OpenWrt 镜像构建工具
        run: |
          URL="https://downloads.openwrt.org/releases/${{ inputs.version }}/targets/${{ inputs.target }}/${{ inputs.subtarget }}/openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64.tar.zst"
          echo "正在下载 Image Builder: $URL"
          # 验证 URL 是否有效
          curl -sIL "$URL" | grep -E "HTTP/[0-9.]+ 200" || {
            echo "主服务器 URL 不可用，尝试镜像服务器"
            URL="https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/${{ inputs.version }}/targets/${{ inputs.target }}/${{ inputs.subtarget }}/openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64.tar.zst"
            echo "镜像服务器 URL: $URL"
            curl -sIL "$URL" | grep -E "HTTP/[0-9.]+ 200" || {
              echo "清华大学镜像服务器也失败，尝试 mirror2.openwrt.org"
              URL="http://mirror2.openwrt.org/releases/${{ inputs.version }}/targets/${{ inputs.target }}/${{ inputs.subtarget }}/openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64.tar.zst"
              echo "备用镜像服务器 URL: $URL"
              curl -sIL "$URL" | grep -E "HTTP/[0-9.]+ 200" || {
                echo "所有服务器均失败，请检查版本 (${{ inputs.version }}) 或网络"
                exit 1
              }
            }
          }
          wget "$URL" || { echo "下载失败，请检查 URL 或网络"; exit 1; }
          echo "解压 zst 文件"
          zstd -d *.tar.zst || { echo "zstd 解压失败"; exit 1; }
          echo "解压 tar 文件"
          tar -xvf *.tar || { echo "tar 解压失败"; exit 1; }
          echo "列出当前目录内容"
          ls -l
          echo "进入 Image Builder 目录"
          IMAGE_BUILDER_DIR="openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64"
          echo "目标目录: $IMAGE_BUILDER_DIR"
          cd "$IMAGE_BUILDER_DIR" || { echo "进入 Image Builder 目录失败，目录名可能不正确"; ls -l; exit 1; }
          # 验证 Makefile 存在
          if [ ! -f "Makefile" ]; then
            echo "错误：Makefile 未找到，目录: ${PWD}"
            ls -l
            exit 1
          fi

      - name: 下载第三方插件包
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          mkdir -p packages
          cd packages
          # 定义并下载插件包
          echo "下载 luci-app-openclash"
          OPENCLASH_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-openclash_0.46.137-r24_all.ipk"
          wget "$OPENCLASH_URL" || { echo "luci-app-openclash 下载失败"; exit 1; }
          echo "下载 luci-app-adguardhome"
          ADGUARD_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-adguardhome_26.108.56344~be2cecb_all.ipk"
          wget "$ADGUARD_URL" || { echo "luci-app-adguardhome 下载失败"; exit 1; }
          echo "下载 luci-app-quickstart"
          QUICKSTART_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-quickstart_0.11.2-r1-r13_all.ipk"
          wget "$QUICKSTART_URL" || { echo "luci-app-quickstart 下载失败"; exit 1; }
          echo "下载 luci-app-dockerman"
          DOCKERMAN_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-dockerman_0.5.26-r17_all.ipk"
          wget "$DOCKERMAN_URL" || { echo "luci-app-dockerman 下载失败"; exit 1; }
          echo "下载 luci-app-nikki"
          NIKKI_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-nikki_1.24.0-r30_all.ipk"
          wget "$NIKKI_URL" || { echo "luci-app-nikki 下载失败"; exit 1; }
          echo "下载 luci-app-store"
          STORE_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-store_0.1.29-5-r17_all.ipk"
          wget "$STORE_URL" || { echo "luci-app-store 下载失败"; exit 1; }
          echo "下载 luci-app-upnp"
          UPNP_URL="https://dl.openwrt.ai/releases/24.10/packages/x86_64/kiddin9/luci-app-upnp_26.226.56266-60d407c_all.ipk"
          wget "$UPNP_URL" || { echo "luci-app-upnp 下载失败"; exit 1; }
          echo "下载 luci-app-lucky"
          LUCKY_URL="https://github.com/sirpdboy/luci-app-lucky/releases/download/v2.15.10/lucky_2.15.10-r1_x86_64.ipk"
          wget "$LUCKY_URL" || { echo "luci-app-lucky 下载失败"; exit 1; }
          ls -l
          cd ..

      - name: 更新软件源并添加自定义源
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          # 将 GitHub Actions 输入参数存储到 shell 变量
          VERSION="${{ inputs.version }}"
          TARGET="${{ inputs.target }}"
          SUBTARGET="${{ inputs.subtarget }}"
          # 检查工作目录是否存在
          if [ ! -d "${PWD}" ]; then
            echo "错误：工作目录 ${PWD} 不存在"
            exit 1
          fi
          # 确保 repositories.conf 存在
          touch repositories.conf
          # 避免重复添加 openwrt_luci 条目
          LUCI_REPO="src/gz openwrt_luci https://downloads.openwrt.org/releases/${VERSION}/packages/${TARGET}_${SUBTARGET}/luci"
          if ! grep -Fx "${LUCI_REPO}" repositories.conf; then
            echo "${LUCI_REPO}" >> repositories.conf
          fi
          # 添加自定义软件源
          echo "src/gz custom_packages file://${PWD}/packages" >> repositories.conf
          # 修正架构路径（将 x86/64 替换为 x86_64）
          sed -i 's|x86/64|x86_64|g' repositories.conf
          # 显示 repositories.conf 内容以便调试
          cat repositories.conf
          # 验证 Makefile 存在
          if [ ! -f "Makefile" ]; then
            echo "错误：Makefile 未找到，目录: ${PWD}"
            ls -l
            exit 1
          fi
          # 显示调试信息
          pwd
          ls -la
          make -v
          # 执行 make defconfig
          make defconfig || { echo "make defconfig 失败"; exit 1; }

      - name: 构建自定义固件
        working-directory: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64
        run: |
          PACKAGES="luci luci-theme-argon luci-app-openclash luci-app-adguardhome luci-app-quickstart luci-app-dockerman luci-app-nikki luci-app-store luci-app-upnp luci-app-lucky adguardhome dnsmasq-full -dnsmasq"
          echo "开始构建固件，包列表: $PACKAGES"
          make image PROFILE="${{ inputs.profile }}" PACKAGES="$PACKAGES" FILES="../files/" EXTRA_IMAGE_NAME="自定义" ROOTFS_PARTSIZE="${{ inputs.rootfs_size }}" || { echo "构建固件失败"; exit 1; }

      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-固件
          path: ./openwrt-imagebuilder-${{ inputs.version }}-${{ inputs.target }}-${{ inputs.subtarget }}.Linux-x86_64/bin/targets/${{ inputs.target }}/${{ inputs.subtarget }}/*
```
